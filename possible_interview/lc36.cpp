// 请你判断一个 9 x 9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。

// 数字 1-9 在每一行只能出现一次。
// 数字 1-9 在每一列只能出现一次。
// 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
// board.length == 9
// board[i].length == 9
// board[i][j] 是一位数字（1-9）或者 '.'

// 输入：board = 
// [["5","3",".",".","7",".",".",".","."]
// ,["6",".",".","1","9","5",".",".","."]
// ,[".","9","8",".",".",".",".","6","."]
// ,["8",".",".",".","6",".",".",".","3"]
// ,["4",".",".","8",".","3",".",".","1"]
// ,["7",".",".",".","2",".",".",".","6"]
// ,[".","6",".",".",".",".","2","8","."]
// ,[".",".",".","4","1","9",".",".","5"]
// ,[".",".",".",".","8",".",".","7","9"]]
// 输出：true

// 输入：board = 
// [["8","3",".",".","7",".",".",".","."]
// ,["6",".",".","1","9","5",".",".","."]
// ,[".","9","8",".",".",".",".","6","."]
// ,["8",".",".",".","6",".",".",".","3"]
// ,["4",".",".","8",".","3",".",".","1"]
// ,["7",".",".",".","2",".",".",".","6"]
// ,[".","6",".",".",".",".","2","8","."]
// ,[".",".",".","4","1","9",".",".","5"]
// ,[".",".",".",".","8",".",".","7","9"]]
// 输出：false
// 解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
//  但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。

#include<iostream>
#include<vector>
#include<set>
using namespace std;
bool isValidSudoku(vector<vector<char>>& board) {
    //row[i][num]表示i行，数字num+1有没有出现过  ，如row[0][2]表示第0行有没有数字3
    int rows[9][9]={0};
    int cols[9][9]={0};
    int box[9][9]={0};
    for (int i = 0; i < 9; i++)
    {
        for(int j=0;j<9;j++){
            if(board[i][j]=='.'){
                continue;
            }
            int num = board[i][j]-'1';
            int index = j/3 + (i/3)*3;//如果只有3行9列，那么j/3可以分是第几个
            //扩展到9行9列，上面还有(i/3)*3个
            if(rows[i][num]||cols[j][num]||box[index][num]){
                return false;
            }
            rows[i][num]=1;
            cols[j][num]=1;
            box[index][num]=1;
        }
    }
    return true;
}
//if(box[j/3 + (i/3)*3][curNumber])

int main(){
    return 0;
}